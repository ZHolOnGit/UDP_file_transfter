#******** DO NOT EDIT THIS FILE ********#
# make csc2035 assignment2 network project
SHELL = /bin/sh

CC ?= cc

CFLAGS := -Wall
LDFLAGS =

# SILENCE_LOGGING off by default
# set from environment using:
#   export SILENCE_LOGGING=1
SILENCE_LOGGING ?= 0

ifeq ($(SILENCE_LOGGING),1)
    CFLAGS += -D_SILENCE_LOGGING
endif

# may have to edit the following if not on Linux or MacOS
os := $(shell uname)
ifeq ($(os),Linux)
    CFLAGS +=-g -std=c99 -D_GNU_SOURCE
    LDFLAGS +=-lm
endif

test_prefix := test_rftcu
test_libs := rft_util.o rft_client_util.o rft_client_logging.o munit.o  
test_parts := init_protocol init_segment read_data send_data send_metadata \
    set_socket_timeout set_udp_socket send_file_with_timeout send_file_normal
test_apps := $(test_parts:%=$(test_prefix)_%)
test_objects := $(test_parts:%=$(test_prefix)_%.o)

all: clean rft_client rft_server tests
.PHONY: all

tests: $(test_apps)
.PHONY: tests

clean_tests: 
	-rm -f $(test_apps)
	-rm -f $(test_objects)
.PHONY: clean_tests

clean: clean_tests
	-rm -f rft_client
	-rm -f rft_server
	-rm -f *.o
	-rm -rf out/nm
	-rm -rf out/wt
	-rm -rf out*
.PHONY: clean

rft_client: rft_client.c rft_util.o rft_client_util.o rft_client_logging.o

rft_server: rft_server.c rft_util.o

# test targets
$(test_prefix)_init_protocol: $(test_prefix)_init_protocol.c $(test_libs)

$(test_prefix)_init_segment: $(test_prefix)_init_segment.c $(test_libs)

$(test_prefix)_read_data: $(test_prefix)_read_data.c $(test_libs)

$(test_prefix)_send_data: $(test_prefix)_send_data.c $(test_libs)

$(test_prefix)_send_metadata: $(test_prefix)_send_metadata.c $(test_libs)

$(test_prefix)_send_file_normal: $(test_prefix)_send_file_normal.c \
    $(test_libs)

$(test_prefix)_send_file_with_timeout: $(test_prefix)_send_file_with_timeout.c \
    $(test_libs)

$(test_prefix)_set_socket_timeout: $(test_prefix)_set_socket_timeout.c \
    $(test_libs)

$(test_prefix)_set_udp_socket: $(test_prefix)_set_udp_socket.c $(test_libs)

test_rft_client_util: test_rft_client_util.c $(test_libs)

